#!/usr/bin/perl

# Copyright 2001-2013, Paul Johnson (paul@pjcj.net)

# This software is free.  It is licensed under the same terms as Perl itself.

# The latest version of this software should be available from my homepage:
# http://www.pjcj.net

require 5.6.1;

use strict;
use warnings;

# VERSION

use Devel::Cover::DB;
use Devel::Cover::cover::Functions qw(
    get_options
    delete_db
    test_command
    run_gcov
    prepare_db
    launch
    new
);

use Config;
use File::Spec;
use File::Find ();
use File::Path;
use Data::Dumper ();  # no import of Dumper (use Devel::Cover::Dumper if needed)

# main program

if (!$ENV{DEVEL_COVER_SELF} && $INC{"Devel/Cover.pm"})
{
    my $err = "$0 shouldn't be run with coverage turned on.\n";
    eval
    {
        require POSIX;
        print STDERR $err;
        POSIX::_exit(1);
    };
    die $err;
}

my %defaults = (
    add_uncoverable_point    => [],
    annotation               => [],
    coverage                 => [],
    delete                   => undef,
    delete_uncoverable_point => [],
    gcov                     => $Config{gccversion},
    ignore                   => [],
    ignore_re                => [],
    launch                   => 0,
    make                     => $Config{make},
    report                   => "",
    report_c0                => 75,
    report_c1                => 90,
    report_c2                => 100,
    select                   => [],
    select_re                => [],
    summary                  => 1,
    uncoverable_file         => [".uncoverable", glob("~/.uncoverable")],
);

my $config = get_options(\%defaults);

my ($self) = new($config);
exit 0 unless defined $self;

if ($self->{delete})
{
    delete_db($self, @ARGV);
    exit 0
}

my $test_result = 0;
if ($self->{test})
{
    # TODO - make this a little robust
    # system "$^X Makefile.PL" unless -e "Makefile";
    delete_db($self, @ARGV) unless defined $self->{delete};
    my $env_db_name = $self->{dbname};
    $env_db_name =~ s/\\/\\\\/g if $^O eq 'MSWin32';
    my $extra = "";
    $extra .= ",-coverage,$_" for @{$self->{coverage}};
    $extra .= ",-ignore,$_"
        for @{$self->{ignore_re}},
            map quotemeta glob, @{$self->{ignore}};
    $extra .= ",-select,$_"
        for @{$self->{select_re}},
            map quotemeta glob, @{$self->{select}};

    $self->{$_} = [] for qw( ignore ignoring select select_re );

    local $ENV{ -d "t" ? "HARNESS_PERL_SWITCHES" : "PERL5OPT" } =
        ($ENV{DEVEL_COVER_TEST_OPTS} || "") .
        " -MDevel::Cover=-db,$env_db_name$extra";

    my $test = test_command($self);

    # touch the XS, C and H files so they rebuild
    if ($self->{gcov})
    {
        my $t = $] > 5.7 ? undef : time;
        my $xs = sub { utime $t, $t, $_ if /\.(xs|cc?|hh?)$/ };
        File::Find::find({ wanted => $xs, no_chdir => 0 }, ".");
    }
    # print STDERR "$_: $ENV{$_}\n" for qw(PERL5OPT HARNESS_PERL_SWITCHES);
    print STDERR "cover: running $test\n";
    $test_result = system $test;
    $self->{report} ||= "html";
}

run_gcov($self) if ($self->{gcov});

my $db = prepare_db($self);
exit 0 unless defined $db;

for my $merge (@ARGV)
{
    print "Merging database from $merge\n" unless $self->{silent};
    my $mdb = Devel::Cover::DB->new(db => $merge);
    $mdb = $mdb->merge_runs;
    $db->merge($mdb);
}

if ($self->{dump_db})
{
    my $d = Data::Dumper->new([$db], ["db"]);
    $d->Indent(1);
    $d->Sortkeys(1) if $] >= 5.008;
    print $d->Dump;
    my $structure = Devel::Cover::DB::Structure->new(base => $self->{dbname});
    $structure->read_all;
    my $s = Data::Dumper->new([$structure], ["structure"]);
    $s->Indent(1);
    $s->Sortkeys(1) if $] >= 5.008;
    print $s->Dump;
    exit 0
}

if (exists $self->{write})
{
    $self->{dbname} = $self->{write} if length $self->{write};
    print "Writing database to $self->{dbname}\n" unless $self->{silent};
    $db->write($self->{dbname});
}

return unless $self->{summary} || $self->{report};

$self->{coverage}    = [ $db->collected ] unless @{$self->{coverage}};
$self->{show}        = { map { $_ => 1 } @{$self->{coverage}} };
$self->{show}{total} = 1 if keys %{$self->{show}};

$db->calculate_summary(map { $_ => 1 } @{$self->{coverage}});

print "\n\n" unless $self->{silent};

# TODO - The sense of select and ignore should be reversed to match
# collection.

my %f = map { $_ => 1 } (@{$self->{select}}
                         ? map glob, @{$self->{select}}
                         : $db->cover->items);
delete @f{map glob, @{$self->{ignore}}};

my $keep = sub
{
    my ($f) = @_;
    return 0 unless exists $db->{summary}{$_};
    for (@{$self->{ignore_re}})
    {
        return 0 if $f =~ /$_/
    }
    for (@{$self->{select_re}})
    {
        return 1 if $f =~ /$_/
    }
    !@{$self->{select_re}}
};
@{$self->{file}} = sort grep $keep->($_), keys %f;

if ($self->{summary}) {
    $db->print_summary(
        $self->{file},
        $self->{coverage},
        {force => 1},
    );
}

exit $test_result unless length $self->{report};

$self->{format}->report($db, $self);

if ($self->{launch}) {
    launch($self, $self->{format});
}

exit $test_result;

__END__

=head1 NAME

refactor_cover - report coverage statistics

=head1 SYNOPSIS

 cover -help -info -version
       -summary -report report_format -outputdir dir
       -select filename -ignore filename
       -select_re RE -ignore_re RE
       -write [db] -delete -dump_db -launch
       -silent
       -coverage criterion
       -test -gcov
       -make [make]
       -add_uncoverable_point -delete_uncoverable_point
       -clean_uncoverable_points -uncoverable_file
       [report specific options]
       coverage_database [coverage_database ...]

=head1 DESCRIPTION

Report coverage statistics in a variety of formats.

The summary option produces a short textual summary.  Other reports are
available by using the report option.

The following reports are currently available:

 text                  - detailed textual summary
 html                  - detailed HTML reports
 html_basic            - detailed HTML reports with syntax highlighting
 compilation           - output in a format similar to Perl

=head1 OPTIONS

The following command line options are supported:

 -h -help              - show help
 -i -info              - show documentation
 -v -version           - show version

 -silent               - don't print informational messages (default off)
 -summary              - give summary report                (default on)
 -report report_format - report format                      (default html)
 -outputdir            - directory for output               (default db)
 -launch               - launch report in viewer (if avail) (default off)

 -select filename      - only report on the file            (default all)
 -ignore filename      - don't report on the file           (default none)
 -select_re RE         - append to REs of files to select   (default none)
 -ignore_re RE         - append to REs of files to ignore   (default none)
 -write [db]           - write the merged database          (default off)
 -delete               - drop database(s)                   (default off)
 -dump_db              - dump database(s) (for debugging)   (default off)

 -coverage criterion   - report on criterion  (default all available)

 -test                 - drop database(s) and run make test (default off)
 -gcov                 - run gcov to cover XS code     (default on if using gcc)
 -make make_prog       - use the given 'make' program for 'make test'

 other options specific to the report format

=head1 REPORT FORMATS

Tool accepts -report option:

=over 4

=item html|html_minimal (default)

HTML reporting. Percentage thresholds are color-coded and configurable
via -report_c0 <integer>, -report_c1 <integer> and -report_c2 <integer>.:

    0%      75%      90%      100%
    |   ..   |   ..   |   ..   |
       <c0      <c1      <c2   c3
       red     yellow   orange green

=item html_basic

HTML reporting with syntax highlighting if L<PPI::HTML> or L<Perl::Tidy>
module is detected. Like html|html_minimal reporting, percentage thresholds
are color-coded and configurable.

=item text

Plain text reporting.

=item compilation

Like text but hacked to give a minimal output in a format similar
to that output by Perl itself so that it's easier to step through
the untested locations with Emacs compilation mode.

=back

=head1 DETAILS

Any number of coverage databases may be specified on the command line.
These databases will be merged and the reports will be based on the
merged information.  If no databases are specified the default database
(cover_db) will be used.

The -write option will write out the merged database.  If no name is
given for the new database, the first database read in will be
overwritten.  When this option is used no reports are generated by
default.

Specify -select and -ignore options to report on specific files.

Specify -coverage options to report on specific criteria.  By default all
available information on all criteria in all files will be reported.
Available coverage options are statement, branch, condition, subroutine, and
pod.  However, if you know you only want coverage information for certain
criteria it is better to only collect data for those criteria in the first
place by specifying them at that point.  This will make the data collection
and reporting processes faster and less memory intensive.  See the
documentation for Devel::Cover for more information.

The -test option will delete the databases and run your tests to generate
new coverage data before reporting on it.  Devel::Cover knows how to work
with standard Perl Makefiles as well as Module::Build based distributions.
For detailed instructions see the documentation for ExtUtils::MakeMaker at
L<https://metacpan.org/module/ExtUtils::MakeMaker> or for Module::Build at
L<https://metacpan.org/module/Module::Build> both of which come as standard
in recent Perl distributions.

The -gcov option will try to run gcov on any XS code.  This requires that
you are using gcc of course.  If you are using the -test option will be
turned on by default.

=head1 EXIT STATUS

The following exit values are returned:

0   All operations were completed successfully.

>0  An error occurred.

With the -test option the exit status of the underlying test run is retuened.

=head1 SEE ALSO

 L<Devel::Cover>

=head1 BUGS

Did I mention that this is alpha code?

See the BUGS file.

=head1 LICENCE

Copyright 2001-2013, Paul Johnson (paul@pjcj.net)

This software is free.  It is licensed under the same terms as Perl itself.

The latest version of this software should be available from my homepage:
http://www.pjcj.net

=cut
